stages:
#  - build
#  - test
  - deploy-staging
  - deploy-production

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  TAG_DB_LATEST: $CI_REGISTRY_IMAGE/test-db/$CI_COMMIT_REF_NAME:latest
  TAG_DB_COMMIT: $CI_REGISTRY_IMAGE/test-db/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  POSTGRES_DB: custom_db
  POSTGRES_USER: custom_user
  POSTGRES_PASSWORD: custom_pass
  PORT: 3000
  DATABASE_PASSWORD: custom_pass
  DB_USER: postgres
  DB_HOST: postgres
  DB_PORT: 5432
  DB_DATABASE: foodie
  NODE_ENV: development


# build-docker-image:
#   image: docker:latest
#   stage: build
#   services:
#     - docker:19.03.0-dind
#   script:
#     - echo $DOCKER_HOST
#     - docker build -t $TAG_COMMIT -t $TAG_LATEST .
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker push $TAG_COMMIT
#     - docker push $TAG_LATEST

# build-test-db-image:
#   image: docker:latest
#   stage: build
#   services:
#     - docker:19.03.0-dind
#   script:
#     - docker build -t $TAG_DB_COMMIT -t $TAG_DB_LATEST -f ./test-database/Dockerfile .
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker push $TAG_DB_COMMIT
#     - docker push $TAG_DB_LATEST



# connect:
#   stage: test
#   services:
#     - name: $TAG_DB_LATEST
#       alias: postgres  
#   image: node:16-alpine3.13
#   allow_failure: true
#   script:
#       - echo "API tests will be performed by curl."
#       - echo $DOCKER_HOST
#       - echo $DOCKER_DRIVER
#       - echo $KUBECONFIG
#       - pwd
#       - ls -a
#       - npm install
#       - node server.js &
#       - apk --no-cache add curl
#       - echo  "Test sh script is running."
#       - sh ./api-test.sh


deploy-staging:
  stage: deploy-staging
  image: devth/helm:latest
  environment: staging
  rules:
  - if: ($CI_COMMIT_BRANCH == "main")
  script:
    - helm upgrade --install --set deployment.env.NODE_ENV=development -f ./helm/values.yaml node-api ./helm


deploy-production:
  stage: deploy-production
  image: devth/helm:latest
  environment: production
  rules:
    - if: ($CI_COMMIT_BRANCH == "main")
  script:
    - helm upgrade --install --set deployment.env.NODE_ENV=production -f ./helm/values.yaml node-api ./helm



